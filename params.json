{"name":"RTD from Xolvio","tagline":"Test Runner for Meteor","body":"### What is RTD\r\n------------\r\nRTD is the development paradigm used at Xolvio. It's exactly like having a continuous integration server on your machine. Every time you save a file RTD will:\r\n\r\n* Run all your unit tests in **any browser** [default: PhantomJS]\r\n* Run all your acceptance tests in **any browser** [default: Chrome]\r\n* Combines test coverage from **unit and acceptance** runs\r\n* Checks the coverage thresholds and provides a pretty report [default: 100%]\r\n\r\nWe have focussed our efforts on making RTD as seamless and fast as possible. It will run in the background without bothering your workflow and you simply get pass/fail as you develop. \r\n\r\n### Instructions \r\n------------\r\nEnsure you have [node](http://nodejs.org/download/) and [Meteor](http://meteor.com) and that these dependencies globally installed (you may need to run this as sudo, depending on how you're setup)\r\n```bash\r\n$ npm i -g karma phantomjs selenium-webdriver grunt-cli jasmine-node istanbul\r\n```\r\nIf you have any issues with phantomJS, you may need to [do this](https://github.com/xolvio/rtd/issues/9)\r\n\r\nNext you need to move your meteor code into an app directory the structure of your application as follows:\r\n\r\n    ├── <project root>\r\n    │ ├── .git\r\n    │ ├── app\r\n    │ │ └── .meteor\r\n    │ │ └── <your meteor code here>\r\n\r\nRTD will live under the test directory. You can use a git sub-module as follows: (advised method as you'll get updates to the stubs/runners as we do them)\r\n```bash\r\n$ cd <your project root>\r\n$ mkdir -p ./test/acceptance/fixtures; mkdir ./test/unit; touch ./test/acceptance/fixtures/empty.js;\r\n$ git submodule add git@github.com:xolvio/rtd.git ./test/rtd; cd test/rtd; npm install;\r\n```\r\n\r\nOnce the above runs, you should see this:\r\n\r\n    ├── <project root>\r\n    │ ├── .git\r\n    │ ├── app\r\n    │ │ └── .meteor\r\n    │ │ └── <your meteor code here>\r\n    │ ├── test\r\n    │ │ └── acceptance\r\n    | │ │ └── fixtures\r\n    | | │ │ └── empty.js\r\n    | │ │ └── <your end-to-end tests here>\r\n    │ │ └── rtd\r\n    | │ │ └── <a whole bunch of stuff>\r\n    │ │ └── unit\r\n    | │ │ └── <your unit tests here>\r\n\r\nNow every time you start development, just run this: (the first time will take a few minutes as selenium-server & chromedriver are downloaded)\r\n```bash\r\n$ cd <your project root>/test/rtd\r\n$ grunt\r\n```\r\nEnjoy using RTD\r\n\r\nTo see the actual coverage report in detail, go to [http://localhost:8000/coverage](http://localhost:8000/coverage)\r\n\r\nFind out more\r\n-------------\r\n* [Read our blog post on Unit-testing with Meteor](http://blog.xolv.io/2013/04/unit-testing-with-meteor.html)\r\n* [Read our blog post on End-to-end testing with Meteor](http://blog.xolv.io/2013/04/end-to-end-testing-for-web-apps-meteor.html)\r\n* [See an example of RTD with Meteor + Leaderboard sample app](https://github.com/xolvio/real-time-development-with-meteor)\r\n\r\n### RTD Philosophy\r\n------------\r\nThe ability to capture and deal with feedback is a great indicator of quality, both of working practices and the end deliverables. Feedback comes in all shapes and sizes and **the earlier feedback can be captured, the easier and cheaper it is to deal with**. \r\n\r\nWhat if we could get feedback in realtime? It's an ideal for sure, but consider the trends of Agile development, lean startups, super fast test executions with file watcher triggers and so forth. You could say we're not that far off from this ideal with all the magic efforts the community has put in.\r\n\r\nFrom a developer's perspective, here are the key feedback areas and how they are detected:\r\n\r\nFeedback     | Detection mechanisms | Currently Implemented\r\n-------------|----------------------|----------------------\r\nCode quality | Static analysis      | Test Coverage\r\nRegression   | Automated testing    | Unit & end-to-end acceptance\r\nExceptions   | Logging              | _Coming Soon_\r\nPerformance  | Monitoring           | _Coming Soon_ \r\n\r\nOf course each one of those detection mechanisms needs to be implemented, and this is often missed out all together in an end-to-end deployment pipeline, let alone on an individual developer's machine. RTD is the toolset and wiring required to get the above-mentioned feedback locally, in realtime.","google":"UA-41487105-1","note":"Don't delete this file! It's used internally to help with page regeneration."}